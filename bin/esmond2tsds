#!/usr/bin/perl

use strict;
use warnings;

# For esmond libs
use lib "/usr/lib/perfsonar/lib/";

use DateTime;
use Data::Dumper;
use List::MoreUtils qw(natatime);

use JSON::XS qw(decode_json encode_json);
use LWP::Simple qw(get);

use perfSONAR_PS::Client::Esmond::ApiConnect;
use perfSONAR_PS::Client::PSConfig::ApiConnect;
use perfSONAR_PS::Client::PSConfig::Archive;
use perfSONAR_PS::Client::PSConfig::Parsers::TaskGenerator;
use perfSONAR_PS::Utils::ISO8601 qw(duration_to_seconds);

use GRNOC::Config;
use GRNOC::WebService::Client;
use GRNOC::Monitoring::Service::Status qw(write_service_status);

use Getopt::Long;

use constant TSDS_TYPE_OWAMP => 'ps_owamp';
use constant TSDS_TYPE_BWCTL => 'ps_bwctl';
use constant TSDS_TYPE_DISKTODISK => 'ps_disktodisk';
use constant STATUS_FILE     => '/var/lib/netsage/esmond-mesh-2-tsds/';

my $config_file = "/etc/netsage/esmond-mesh-2-tsds/config.xml";
my $hours       = 1;

my $NOW = time();

GetOptions("configc|c=s" => \$config_file,
	   "back|b=s"    => \$hours);

my $config = GRNOC::Config->new(config_file => $config_file, force_array => 0);

my $username = $config->get('/config/tsds/@user');
my $password = $config->get('/config/tsds/@password');
my $tsds_url = $config->get('/config/tsds/@url');
my $tsds_realm = $config->get('/config/tsds/@realm');
my $mesh_url = $config->get('/config/mesh/@url');

my $client = GRNOC::WebService::Client->new(usePost => 1,
					    uid     => $username,
					    passwd  => $password,
					    url     => $tsds_url,
						realm   => $tsds_realm);

#
# Step 1 - Build pSConfig client and validate downloaded JSON
#
my $psconfig_client = new perfSONAR_PS::Client::PSConfig::ApiConnect(url => $mesh_url);
my $psconfig = $psconfig_client->get_config();
if($psconfig_client->error()){
    my $err = "Error retrieving JSON. Encountered the following error:\n\n";
    $err .= "   " . $psconfig_client->error();
    print $err;
    exit 1;
}
my @validate_errors = $psconfig->validate();
if(@validate_errors){
    my $err = "pSConfig JSON is not valid. Encountered the following validation errors:\n";
    foreach my $error(@validate_errors){
        $err .=  "\n   Node: " . $error->path . "\n";
        $err .=  "   Error: " . $error->message . "\n";
    }
    print $err;
    exit 1;
}

#
# Step 2 - Iterate through each task in pSConfig template and
# get source, dest, interval and MA URL for supported tests
#
foreach my $task_name(@{$psconfig->task_names()}){
	my $tg = new perfSONAR_PS::Client::PSConfig::Parsers::TaskGenerator(
	    psconfig => $psconfig,
	    task_name => $task_name,
	    use_psconfig_archives => 1
	);
	my $task = $psconfig->task($task_name);
    next if(!$task || $task->disabled());
	unless($tg->start()){
         print "Error initializing task iterator: " . $tg->error();
         exit 1;
    }

	#check interval based on test type
	my $test_type = $tg->test()->type();
	my $test_spec = $tg->test()->spec();
	my $schedule = $tg->schedule();
	my $interval;
	if($test_type eq 'throughput' || $test_type eq 'disk-to-disk'){
		unless($schedule && $schedule->repeat()){
			warn "Invalid schedule for $task_name of type $test_type. Must have repeat.";
			next;
		}
		eval{$interval = duration_to_seconds($schedule->repeat())};
		if($@){
			warn "Unable to convert $task_name repeat to seconds, skipping: $@";
			next;
		}
	}elsif ($test_type eq 'latencybg'){
		#get packet interval or defacult to 10 per sec (.1)
		my $packet_interval = $test_spec->{'packet-interval'} ? $test_spec->{'packet-interval'} : 0.1;
		#get packet count or defacult to 600
		my $packet_count = $test_spec->{'packet-count'} ? $test_spec->{'packet-count'} : 600;
		#finally set interval to frequency results are reported
		$interval = $packet_interval * $packet_count;
	}else{
		warn "Task $task_name is unsupported type $test_type, skipping";
		next;
	}

	#iterate through endpoint pairs
	my @pair;
    while(@pair = $tg->next()){
		#get archive - select the first esmond archive we find
		my $ma_url;
		foreach my $archive_raw(@{$tg->expanded_archives()}){
			my $archive = new perfSONAR_PS::Client::PSConfig::Archive(data => $archive_raw );
			next unless($archive->archiver() eq 'esmond');
			next unless($archive->archiver_data());
			next unless($archive->archiver_data()->{'url'});
			$ma_url = $archive->archiver_data()->{'url'};
			last;
		}
		unless($ma_url){
			warn "No valid archives found for $task_name, skipping";
			next;
		}

		#get data from esmond for each hour configured
		for (my $i = 0; $i < $hours; $i++){
			# get forward and reverse
			my $to_tsds_forward = get_data(from       => $pair[0]->address(),
						       to         => $pair[1]->address(),
						       ma_url     => $ma_url,
						       hours_back => $i,
						       interval   => $interval,
						       test_type  => $test_type);

			my $to_tsds_reverse = get_data(from       => $pair[1]->address(),
						       to         => $pair[0]->address(),
						       ma_url     => $ma_url,
						       hours_back => $i,
						       interval   => $interval,
						       test_type  => $test_type);

			# Send data collected for this source/dest pairing over
			# into TSDS
			#
			my @combined = (@$to_tsds_forward, @$to_tsds_reverse);
			my $merged = merge_owamp_results(\@combined);
			send_to_tsds($merged)
		}
	}
}

#
# Step 3 - for each test in the config file, grab the data in Esmond so that
# we can reformat and send to TSDS
#
$config->{'force_array'} = 1;
my $config_tests = $config->get('/config/tests');
foreach my $conf (@$config_tests){

    my $tests = $conf->{'test'};
    # find ma_url
    my $ma_url = $conf->{'ma_url'};
    foreach my $test (@$tests) {

       my $pairs = $test->{'pair'};
       my $test_type = $test->{'type'};
       my $interval;

       if ($test_type eq 'throughput' || $test_type eq 'disk-to-disk'){
           $interval = $test->{'interval'};
       } elsif ($test_type =~ 'latencybg'){
           $interval = $test->{'sample_count'} * $test->{'packet_interval'};
       }

       foreach my $pair (@$pairs){

           for (my $i = 0; $i < $hours; $i++){

               # get forward and reverse
               my $to_tsds_forward = get_data(from		=> $pair->{'a'},
                                              to		=> $pair->{'b'},
                                              ma_url		=> $ma_url,
                                              hours_back	=> $i,
                                              interval		=> $interval,
                                              test_type		=> $test_type);

               my $to_tsds_reverse = get_data(from		=> $pair->{'b'},
                                              to		=> $pair->{'a'},
                                              ma_url		=> $ma_url,
                                              hours_back	=> $i,
                                              interval		=> $interval,
                                              test_type		=> $test_type);

              #
              # Send data collected for this source/dest pairing over
              # into TSDS
              #
               my @combined = (@$to_tsds_forward, @$to_tsds_reverse);
               my $merged = merge_owamp_results(\@combined);

               send_to_tsds($merged)
           }
       }
    }
}


write_service_status(  path => STATUS_FILE,
		       error => 0,
		       error_txt => "",
		       timestamp => $NOW );

sub get_data {
    my %args = @_;
    my $a          = $args{'from'};
    my $b          = $args{'to'};
    my $url        = $args{'ma_url'};
    my $hours_back = $args{'hours_back'};
    my $interval   = $args{'interval'};
    my $test_type  = $args{'test_type'};

    my @to_tsds;

    my $end   = $NOW - ($hours_back * 3600);
    my $start = $end - 3600;

    # HACK, THESE ARE PROBLEMATIC
    return [] if ($url eq 'http://ps-ma.ampath.net/esmond/perfsonar/archive/');

    print "Getting from $a -> $b from $url ($start -> $end)\n";

    my @event_types;
    if ($test_type eq 'throughput'){
		push(@event_types, 'throughput');
    } elsif ($test_type eq 'disk-to-disk'){
		push(@event_types, 'pscheduler-raw');
    } elsif ($test_type eq 'latencybg'){
		push(@event_types, 'packet-loss-rate');
		push(@event_types, 'histogram-owdelay');
    }

    foreach my $event_type (@event_types){
		my $filters = new perfSONAR_PS::Client::Esmond::ApiFilters();
		$filters->source($a);
		$filters->destination($b);
		$filters->event_type($event_type);
		$filters->metadata_filters->{'pscheduler-test-type'} = $test_type;
		$filters->time_start($start); #only get metadata modified since start


		my $client = new perfSONAR_PS::Client::Esmond::ApiConnect(
		    url => $url,
		    filters => $filters
		    );
		my $metadata_results = $client->get_metadata();
		# check for errors
		if ($client->error){
		    warn "Error contacting $url";
		    next;
		}
		foreach my $metadatum (@$metadata_results){
		    # get data of a particular event type
		    my $et = $metadatum->get_event_type($event_type);
		    if (! $et){
				warn "no event type? shouldn't be possible";
				next;
		    }
		    $et->filters->time_start($start);
		    $et->filters->time_end($end);

		    my $data = $et->get_data();
		    _error($et->error) if ($et->error); #check for errors

		    # Go through and push data into TSDS format
		    foreach my $d (@$data){

			my $meta = {
			    "source"      => $a,
			    "destination" => $b
			};

			if ($event_type eq 'packet-loss-rate'){
			    push(@to_tsds, {
				"meta"     => $meta,
			     	"interval" => $interval,
			     	"type"     => TSDS_TYPE_OWAMP,
			     	"time"     => $d->ts,
			     	"values"   => {
			     	    "loss" => $d->val
			     	}
				 });
			}

			if ($event_type eq 'throughput'){
			    push(@to_tsds, {
				"meta"     => $meta,
				"interval" => $interval,
				"type"     => TSDS_TYPE_BWCTL,
				"time"     => $d->ts,
				"values"   => {
				    "throughput" => $d->val
				}
				 });
			}

			if ($event_type eq 'pscheduler-raw'){
			    push(@to_tsds, {
					"meta"     => $meta,
					"interval" => $interval,
					"type"     => TSDS_TYPE_DISKTODISK,
					"time"     => $d->ts,
					"values"   => {
					    "disk_to_disk_throughput" => int($d->val->{'throughput'}),
					    "disk_to_disk_bytes_sent" => int($d->val->{'bytes-sent'})
					}
				 });
			}

			if ($event_type eq 'histogram-owdelay'){
			    my $min;
			    my $max;
			    my $sum;
			    my $count_total;

			    foreach my $delay (keys %{$d->val}){
				my $count_delay = $d->val->{$delay};
				$count_total += $count_delay;
				$sum         += $delay * $count_delay;

				if (! defined $min || $delay < $min){
				    $min = $delay;
				}
				if (! defined $max || $delay > $max){
				    $max = $delay;
				}
			    }

			    my $avg = undef;
			    if ($count_total > 0){
				$avg = $sum / $count_total;
			    }

			    push(@to_tsds, {
				"meta"     => $meta,
				"interval" => $interval,
				"type"     => TSDS_TYPE_OWAMP,
				"time"     => $d->ts,
				"values"   => {
				    "latency_min" => $min,
				    "latency_max" => $max,
				    "latency_avg" => $avg
				}
				 });
			}

		    }
		}
    }

    return \@to_tsds;
}

sub merge_owamp_results {
    my $array = shift;

    my @merged;

    my %lookup;

    foreach my $el (@$array){
	# don't care about other types
	if ($el->{'type'} ne TSDS_TYPE_OWAMP){
	    push(@merged, $el);
	    next;
	}

	my $src = $el->{'meta'}{'source'};
	my $dest = $el->{'meta'}{'destination'};

	my $floored = int($el->{'time'} / $el->{'interval'}) * $el->{'interval'};

	if (! exists $lookup{$src}{$dest}{$floored}){
	    $lookup{$src}{$dest}{$floored} = $el;
	}

	foreach my $key (keys %{$el->{'values'}}){
	    $lookup{$src}{$dest}{$floored}{'values'}{$key} = $el->{'values'}{$key};
	}

    }

    foreach my $src (keys %lookup){
	foreach my $dst (keys %{$lookup{$src}}){
	    foreach my $time (keys %{$lookup{$src}{$dst}}){
		push(@merged, $lookup{$src}{$dst}{$time});
	    }
	}
    }

    return \@merged;
}

sub send_to_tsds {
    my $data = shift;

    my $block_size = 50;
    if ($block_size > scalar @$data){
	$block_size = scalar @$data;
    }

    my $it = natatime($block_size, @$data);

    while (my @block = $it->()){

	my $res = $client->add_data(data => encode_json(\@block));

	if (! $res){
	    _error("Error: " . $client->get_error());
	}
	if (ref($res) ne 'HASH'){
	    _error("Error: did not get hash response back, was " . Dumper($res));
	}
	if ($res->{'error'}){
	    _error("WS Error: " . Dumper($res));
	}

    }
}

sub _error {
    my $text = shift;

    write_service_status(  path => STATUS_FILE,
			   error => 1,
			   error_txt => $text,
			   timestamp => $NOW  );

    die $text;
}
